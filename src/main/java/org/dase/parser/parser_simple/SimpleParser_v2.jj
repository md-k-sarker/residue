options {
    STATIC=false;
    JAVA_UNICODE_ESCAPE=true;
    //LOOKAHEAD=2; 
    JAVA_TEMPLATE_TYPE = "modern";
    EXCEPTIONS_SUPER_CLASS = "org.semanticweb.owlapi.io.OWLParserException";
    SUPPORT_CLASS_VISIBILITY_PUBLIC=false;
    OUTPUT_DIRECTORY="/Users/sarker/Workspaces/Jetbrains/residue/java/residue_java/src/main/java/org/dase/parser/parser_simple";
    //DEBUG_PARSER=true;
    //DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(SimpleParser_v2)

/* This file is part of the OWL API.
 * The contents of this file are subject to the LGPL License, Version 3.0.
 * Copyright 2014, The University of Manchester
 * 
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * Alternatively, the contents of this file may be used under the terms of the Apache License, Version 2.0 in which case, the provisions of the Apache License Version 2.0 are applicable instead of those above.
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */

package org.dase.parser.parser_simple;

import java.util.Set;
import java.util.HashSet;
import java.util.*;

import org.dase.ecii.core.SharedDataHolder;
import org.dase.ecii.datastructure.CandidateClass;
import org.dase.ecii.datastructure.CandidateSolution;
import org.dase.ecii.datastructure.ConjunctiveHornClause;
import org.semanticweb.owlapi.vocab.OWLRDFVocabulary;
import org.semanticweb.owlapi.util.*;

import org.semanticweb.owlapi.model.*;

@SuppressWarnings("all")
public class SimpleParser_v2 {
    private String defaultNamespace = IRI.create("http://www.semanticweb.org/ontologies/Ontology").toString();
    private Map<String, String> namespaceMap = new HashMap<String, String>();
    private OWLDataFactory factory;
    private Map<String, IRI> iriMap = new HashMap<String, IRI>();
    private Map<String, IRI> qnameIRIMap = new HashMap<String, IRI>();
    private Set<OWLAxiom> axioms = new LinkedHashSet<OWLAxiom>();
    private int a;
    private static boolean negationHappened = false;

    public void setOWLDataFactory(OWLDataFactory factory) {
        this.factory = factory;
    }

    public void setPrefixMapping(String prefix, String namespace) {
        namespaceMap.put(prefix, namespace);
    }

    public void setDefaultNamespace(String ns) {
        defaultNamespace = ns;
    }

    public IRI getIRI(String val) {
        IRI iri = iriMap.get(val);
        if(iri == null) {
            iri = IRI.create(val);
            iriMap.put(val, iri);
        }
        return iri;
    }

    public IRI getIRIFromId(String qname) {
        if(qname.equals("top") || qname.equals("\u22A4")) {
            return OWLRDFVocabulary.OWL_THING.getIRI();
        }
        if(qname.equals("bottom") || qname.equals("\u22A5")) {
            return OWLRDFVocabulary.OWL_NOTHING.getIRI();
        }
        IRI iri = qnameIRIMap.get(qname);
        if(iri == null) {
            iri = getIRI(defaultNamespace + "#" + qname);
            qnameIRIMap.put(qname, iri);
        }
        return iri;
    }
    private void addAxiom(OWLAxiom ax) {
        if (ax == null) {
          return;
        }
        axioms.add(ax);
    }
}

PARSER_END(SimpleParser_v2)

// We skip over any white space
SKIP: {" " | "\r" | "\t"}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TOKEN: { <SUBCLASSOF: ("\u2291" | "->" | "sub" | "\\sqsubseteq")> }
TOKEN: { <EQUIVALENTTO: ("\u2261" | "==" | "\\equiv")> }
TOKEN: { <NEQ: ("\u2260" | "!=" | "\\not=")> }
TOKEN: { <COMPOSE: "o" | "\u2218" > }
TOKEN: { <DOT: "."> }
TOKEN: { <INVERSE: "\u207B" | "^-"> }
TOKEN: { <OPENPAR: "("> }
TOKEN: { <CLOSEPAR: ")"> }
TOKEN: { <OPENSQPAR: "["> }
TOKEN: { <CLOSESQPAR: "]"> }
TOKEN: { <OPENBRACE: "{"> }
TOKEN: { <CLOSEBRACE: "}"> }
TOKEN: { <COLON: ":"> }
TOKEN: { <AND: ("\u2293" | "and" | "AND" | "\\sqcap")> }
TOKEN: { <OR: ("\u2294" | "or" | "OR" | "\\sqcup")> }
TOKEN: { <NOT: ("\u00AC" | "not" | "NOT" | "\\lnot")> }
TOKEN: { <SOME: ("\u2203" | "exists" | "EXISTS" | "some" | "SOME" | "\\exists")> }
TOKEN: { <ALL: ("\u2200" | "forall" | "FORALL" | "\\forall")> }
TOKEN: { <MIN: ("\u2265" | ">" | "\\geq")> }
TOKEN: { <MAX: ("\u2264" | "<" | "\\leq")> }
TOKEN: { <EXACT: ("=" | "equal")> }
TOKEN: { <IN: ("in" | "\u2208")> }
TOKEN: { <TRANSITIVEROLES: ("trans" | "transitive" | "R\u207A")> }
TOKEN: { <INT: (["0"-"9"])+> }
TOKEN: { <DOUBLE: (<INT>)+<DOT>(<INT>)*> }
TOKEN: { <ID: ((~[" ", "\n", "\t", "(", ")", "[", "]", "{", "}", ",", "^", "=", "<", ">", ".", "\u207B", "\u00AC", "\u2208"]))+> }


/*
 * <pre>
 *   Candidate solution is of the form:
 *
 *   l
 * A ⊓ 􏰃∃Ri.Ci,
 *   i=1
 *    which can  also be written as:
 *   k3       k2
 * A ⊓ 􏰃∃Ri. 􏰀(⊔(Bji ⊓¬(D1 ⊔...⊔Dji)))
 *   i=1    j=1
 *
 *   here,
 *   k3 = limit of object properties considered. = ConfigParams.objPropsCombinationLimit
 *   k2 = limit of horn clauses. = ConfigParams.hornClauseLimit.
 *
 *   As the solution follows this grammer, it has severe limitation:
 *   1. No. of Bare Class (like A) can be at-most 1. We are not allowing A ⊓ B, where both A and B are bare types. If we omit this, we will have to verify the grouping of the solution again.
 *   2. For single object property, we can have multiple horn clause which will be used as OR,
 *              for example: ∃objProp1.((posClass1) ⊔ (posClass2))
 *   3. For multilpe object property, each property will be used as AND,
 *              for example: ∃objProp2.(posClass2) ⊓ ∃objProp1.(posClass1)
 * </pre>

        Grammer:
        CandidateSolution = (CandidateClass) ( AND CandidateClass)*
        ------------
        CandidateClass = PosClass |  // not using now, as this is happening instead of the 5th one, when the input is: River or Animal
                         NOT NegClass |
                         SOME objProp DOT PosClass |
                         SOME objProp DOT NOT NegClass |
                         (ConjunctiveHornClause) ( OR ConjunctiveHornClause)* | // without object properties and without bracket
                         "(" (ConjunctiveHornClause) ( OR ConjunctiveHornClause)* ")" | // without object properties and with bracket
                         SOME objProp DOT "(" (ConjunctiveHornClause) ( OR ConjunctiveHornClause)* ")" | // with object properties and with bracket
                         SOME objProp DOT NOT "(" (ConjunctiveHornClause) ( OR ConjunctiveHornClause)* ")" | // with object properties and with bracket
        --------------
        ConjunctiveHornClause = Class |  // may be positive or negative!!!!!!!!!!
                              = PosClass AND NegClasses |
                              = "(" PosClass AND NegClasses ")" |
                              = NegClasses
        --------------
        NegClasses = NOT NegClass |
                   = NOT "(" NegClass ( OR NegClass )* ")"
 */

CandidateSolution parseCandidateSolution() :
{   CandidateSolution candidateSolution = new CandidateSolution();
    CandidateClass candidateClass = null;
 }
{    (candidateClass = parseCandidateClass() {candidateSolution.addCandidateClass(candidateClass);} )
    (<AND> candidateClass = parseCandidateClass() { candidateSolution.addCandidateClass(candidateClass); } )*
     <EOF>
    { return candidateSolution; }
}

CandidateClass parseCandidateClass() :
{   CandidateClass candidateClass = null;
    ConjunctiveHornClause conjunctiveHornClause = null;
    OWLClassExpression owlClassExpression;
    OWLObjectProperty owlObjectProperty = null;

}
{   (
//    LOOKAHEAD(6) ( owlClassExpression = parseClassId() {
//    conjunctiveHornClause = new ConjunctiveHornClause(SharedDataHolder.noneOWLObjProp);
//    conjunctiveHornClause.setPosObjectType(owlClassExpression);
//    candidateClass = new CandidateClass(SharedDataHolder.noneOWLObjProp);
//    candidateClass.addConjunctiveHornClauses(conjunctiveHornClause);
//    }) |
    LOOKAHEAD(6) ( <NOT> owlClassExpression = parseClassId() {
        conjunctiveHornClause = new ConjunctiveHornClause(SharedDataHolder.noneOWLObjProp);
        conjunctiveHornClause.addNegObjectType(owlClassExpression);
        candidateClass = new CandidateClass(SharedDataHolder.noneOWLObjProp);
        candidateClass.addConjunctiveHornClauses(conjunctiveHornClause);
    }) |
    LOOKAHEAD(6) ( <SOME>  owlObjectProperty = parseObjectPropertyId()  <DOT> owlClassExpression = parseClassId() {
    conjunctiveHornClause = new ConjunctiveHornClause(owlObjectProperty);
    conjunctiveHornClause.setPosObjectType(owlClassExpression);
    candidateClass = new CandidateClass(owlObjectProperty);
    candidateClass.addConjunctiveHornClauses(conjunctiveHornClause);
    })  |
    LOOKAHEAD(6) ( <SOME>  owlObjectProperty = parseObjectPropertyId() (<DOT>) (<NOT>) owlClassExpression = parseClassId() {
    conjunctiveHornClause = new ConjunctiveHornClause(owlObjectProperty);
    conjunctiveHornClause.addNegObjectType(owlClassExpression);
    candidateClass = new CandidateClass(owlObjectProperty);
    candidateClass.addConjunctiveHornClauses(conjunctiveHornClause);
    })  |
    // without object properties and without bracket
    LOOKAHEAD(6) (  conjunctiveHornClause = parseConjunctiveHornClause(SharedDataHolder.noneOWLObjProp,false) {
    candidateClass = new CandidateClass(SharedDataHolder.noneOWLObjProp);
    candidateClass.addConjunctiveHornClauses(conjunctiveHornClause);
    } (<OR> conjunctiveHornClause = parseConjunctiveHornClause(SharedDataHolder.noneOWLObjProp,false) {
//    candidateClass = new CandidateClass(SharedDataHolder.noneOWLObjProp);
    candidateClass.addConjunctiveHornClauses(conjunctiveHornClause);
    })*  )  |
    // without object properties and with bracket
    LOOKAHEAD(6) ( <OPENPAR> conjunctiveHornClause = parseConjunctiveHornClause(SharedDataHolder.noneOWLObjProp,false) {
    candidateClass = new CandidateClass(SharedDataHolder.noneOWLObjProp);
    candidateClass.addConjunctiveHornClauses(conjunctiveHornClause);
    } (<OR> conjunctiveHornClause = parseConjunctiveHornClause(SharedDataHolder.noneOWLObjProp,false) {
//    candidateClass = new CandidateClass(SharedDataHolder.noneOWLObjProp);
    candidateClass.addConjunctiveHornClauses(conjunctiveHornClause);
    })*  <CLOSEPAR> )  |
    // with object properties
    LOOKAHEAD(6) ( <SOME>  owlObjectProperty = parseObjectPropertyId() <DOT> <OPENPAR>  conjunctiveHornClause = parseConjunctiveHornClause(owlObjectProperty,false) {
    candidateClass = new CandidateClass(owlObjectProperty);
    candidateClass.addConjunctiveHornClauses(conjunctiveHornClause);
    } (LOOKAHEAD(6) <OR> conjunctiveHornClause = parseConjunctiveHornClause(owlObjectProperty,false) {
//    candidateClass = new CandidateClass(owlObjectProperty);
    candidateClass.addConjunctiveHornClauses(conjunctiveHornClause);
    })* <CLOSEPAR> {}) |
    ( <SOME> owlObjectProperty = parseObjectPropertyId() <DOT> <NOT>
    <OPENPAR>  conjunctiveHornClause = parseConjunctiveHornClause(owlObjectProperty,true) {
//    candidateClass = new CandidateClass(owlObjectProperty);
    candidateClass.addConjunctiveHornClauses(conjunctiveHornClause);
    }(<OR> conjunctiveHornClause = parseConjunctiveHornClause(owlObjectProperty,true) {
//    candidateClass = new CandidateClass(owlObjectProperty);
    candidateClass.addConjunctiveHornClauses(conjunctiveHornClause);
    })* <CLOSEPAR> {})
    )
    { return candidateClass; }
}

ConjunctiveHornClause parseConjunctiveHornClause(OWLObjectProperty owlObjectProperty,boolean isNegative) :
{   ConjunctiveHornClause conjunctiveHornClause = new ConjunctiveHornClause(owlObjectProperty);
    ArrayList<OWLClassExpression> negTypes = new ArrayList<OWLClassExpression>();
    OWLClassExpression owlClassExpression;
}
{
    ( LOOKAHEAD(6)  owlClassExpression = parseClassId() {
        if(isNegative) { conjunctiveHornClause.addNegObjectType(owlClassExpression);} else{ conjunctiveHornClause.setPosObjectType(owlClassExpression);}
    } |
    ( owlClassExpression = parseClassId() { conjunctiveHornClause.setPosObjectType(owlClassExpression);}
    <AND> parseNegClasses() {for(OWLClassExpression negType: negTypes) { conjunctiveHornClause.addNegObjectType(negType); }}
     ) |
    ( <OPENPAR> owlClassExpression = parseClassId() { conjunctiveHornClause.setPosObjectType(owlClassExpression);}
    <AND> negTypes = parseNegClasses() {for(OWLClassExpression negType: negTypes){ conjunctiveHornClause.addNegObjectType(negType); }}  <CLOSEPAR>
    ) |
    ( negTypes = parseNegClasses() { for(OWLClassExpression negType: negTypes){ conjunctiveHornClause.addNegObjectType(negType); }} )
    )
  { return conjunctiveHornClause; }
}


ArrayList<OWLClassExpression> parseNegClasses() :
{
    ArrayList<OWLClassExpression> negTypes = new ArrayList<OWLClassExpression>();
    OWLClassExpression owlClassExpression;
}
{
    ( LOOKAHEAD(6) <NOT>  owlClassExpression = parseClassId()  { negTypes.add(owlClassExpression); } |
    <NOT> <OPENPAR> (owlClassExpression = parseClassId() { negTypes.add(owlClassExpression); } )
    ( <OR> owlClassExpression = parseClassId() { negTypes.add(owlClassExpression); } )* <CLOSEPAR>
    )
  { return negTypes; }
}


OWLObjectProperty parseObjectPropertyId():
{
    IRI iri;
    boolean inverse = false;
}
{
    iri=parseId() { return factory.getOWLObjectProperty(iri); }
}


OWLClass parseClassId():
{ IRI iri; }
{ iri=parseId() { return factory.getOWLClass(iri); } }




IRI parseId() :
{ Token t; }
{ t=<ID> { return getIRIFromId(t.image); } }
